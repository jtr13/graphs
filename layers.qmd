# Layers

The layers represent the data, what the graph is all about. Everything else--the scales, coordinate system, faceting, and themes--are accessories to make the data clear and comprehensible. Therefore it is essential to get the data right. Even if everything else looks perfect, if the data is wrong the graph is worthless. Each layer consists of [five components](https://ggplot2-book.org/layers.html): 1) data, 2) aesthetic mapping, 3) geom, 4) stat, and 5) position. Most of the time you can rely on the defaults for 4) stat and 5) position, so we'll start with the first three components, all of which are required.

## Data

**ggplot2** is designed to work only with data frames. That means no vectors, matrices, tables, or lists. If your data is is not in data frame form, you'll need to convert it to a data frame first. How can you tell if you have the right format? Use `class` to check:

```{r}
library(ggplot2)
class(BOD)
class(CO2)
class(diamonds)
class(Titanic)
class(Seatbelts)
```

As long as `data.frame` is one of the classes returned, you're good to go. So `BOD` and `CO2`, two of the built-in base R datasets would work, as would `diamonds` a dataset that comes with the **ggplot2** package. Note that `class(diamonds)` also returns `tbl_df` and `tbl` indications that `diamonds` is also a *tibble*, the **tidyverse** version of a data frame. We'll return to this topic later. Neither `Titanic` nor `Seatbelts` is a data frame so both would produce errors if we tried to create graphs from this data with **ggplot2** without converting the data. If you read data from a file with `read.csv()`, `read_csv()`, or other functions for reading tabular data, it will be a `data.frame`.

## Geoms

Geoms are the heart and soul of graphics made with **ggplot2**. A "geom" is short-hand for geometric object, the shapes that represent. We will begin with six commonly used geoms, shown below.

```{r}
#| echo: false
#| fig-height: 3
#| fig-width: 3
#| layout-ncol: 3
#| message: false

options(tidyverse.quiet = TRUE)
library(tidyverse)

df <- data.frame(state.x77) |> 
  rownames_to_column("State") |> 
  mutate(Region = state.region)

fs <- 13
m <- .25
color <- "cornflowerblue"

ggplot(df, aes(Income, Illiteracy)) + 
  geom_point(color = color) + ggtitle("geom_point()") + 
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(fs, base_family = "mono")

ggplot(df, aes(Income)) + 
  geom_histogram(bins = 15, fill = color) + ggtitle("geom_histogram()") + 
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(fs, base_family = "mono")

ggplot(df, aes(Income)) + 
  geom_density(color = color, linewidth = 2) + 
  ggtitle("geom_density()") + 
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(fs, base_family = "mono")

ggplot(df, aes(x = Region, y = Income)) + 
  geom_boxplot(color = color) + ggtitle("geom_boxplot()") + 
  scale_x_discrete(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  theme_void(fs, base_family = "mono")

ggplot(df, aes(x = Region)) + 
  geom_bar(fill = color) + ggtitle("geom_bar()") + 
  scale_x_discrete(expand = expansion(mult = 4*m)) +
  scale_y_continuous(expand = expansion(mult = 1.5*m)) +
  theme_void(fs, base_family = "mono")

ggplot(df, aes(x = Region)) + 
  geom_bar(fill = color) + ggtitle("geom_col()") +
  scale_x_discrete(expand = expansion(mult = 4*m)) +
  scale_y_continuous(expand = expansion(mult = 1.5*m)) +
  theme_void(fs, base_family = "mono")
```

Once these geoms are mastered, the hope is that it will be easy to learn additional geoms as you'll know how they work. (Did you know that `geom_bar()` and `geom_col()` produce the same visual? We'll discuss why later.)

## Aesthetic mappings

An aesthetic mapping relates visual properties with variables (also called features or columns) in the data. There are a limited number of aesthetic mappings; some of the most common are `x`, `y`, `color`, and `fill`. For example, to create the following scatterplot, we map `x` to `Income` and `y` to `Illiteracy`:

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 4
#| layout-ncol: 2

ggplot(df, aes(Income/1000, Illiteracy/100)) +
  geom_point(color = "#0099FF") +
  scale_x_continuous(name = "Per capita income (in thousands of $)") +
  scale_y_continuous(name = "Illiteracy rate", labels = scales::percent) +
  labs(title = "Illiteracy vs. Income by State", caption = "Data: state.x77, base R dataset") +
  theme_bw(fs)

source("helpers.R")
arrow_chart(domain = c("x", "y"), range = c("Income", "Illiteracy")) +
  ggtitle("Aesthetic mappings")

```

For each geom, there is a small set of required mappings and a much larger set of optional mappings. The catch is that sometimes it may not be clear which mappings are required. In this guide we will always make a special point of indicating the required mappings, as this can be a stumbling block for beginners.

::: callout-tip
Whenever you learn a new geom, pay careful attention to the required mappings.
:::

Let's consider an example. `geom_histogram()` has **one** required mapping **`x` or `y`**. A standard histogram with vertical bars is produced by mapping `x` though there may be circumstances in which a `y` mapping is desired, for example to create a population pyramid.

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 4
#| layout-ncol: 2

ggplot(df, aes(x = Income)) +
  geom_histogram(bins = 15, color = "black", fill = color) +
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  ggtitle("x mapped to variable") +
  theme_void(fs)

ggplot(df, aes(y = Income)) +
  geom_histogram(bins = 15, color = "black", fill = color) +
  scale_x_continuous(expand = expansion(mult = m)) +
  scale_y_continuous(expand = expansion(mult = m)) +
  ggtitle("y mapped to variable") +
  theme_void(fs)

```


## Continuous vs. discrete mappings

In addition to knowing the required mappings, it is critical to know whether the the visual component (`x`, `y`, `fill`, `color`, etc.) must be mapped to a *continuous* (think numerical) variable, *discrete* (think categorical) variable, or either one. Since a histogram represents the distribution of a numerical variable and has no meaning for categorical variables, the mapping must be to a numerical variable. If you're working with a data frame you will likely know the data types of its columns, but there are times when you'll need to check that the data type is correct. There are many ways to check; depending on the method, continuous columns will be marked as `numeric`, `num`, `dbl`, `integer`, or `dbl`. 

Recall that we first must be sure that we're working with a data frame:

```{r}
class(CO2)
```

Now let's look at the data types of the columns with `str()`:

```{r}
str(CO2)
```

Note that both `conc` and `uptake` are numeric.

Another method is to use `glimpse()` from the **dplyr** package, which is similar to `str()` but shows more data and less attribute information:

```{r}
library(dplyr)
glimpse(CO2)
```

We see that `glimpse()` labels these columns as `<dbl>` rather than `num`. Again, for our purposes, this distinction isn't important.

::: callout-warning

Common methods for looking at data, `head()` and `View()` do NOT show data types so should not be used in this situation.

:::



This distinction refers very specifically to the R data type and will affect many aspects of the graph, including the axis and color scales. For the purposes of **ggplot2** *continuous* variables include all *numeric* types, which,  *Discrete* mappings will appear as: `factor`, `character`, `chr`, `Factor`, `fct`, `Ord.factor`, `ord`, `logi`, `logical`, `lgl`, to indicate that the variable is a character, factor, or logical. (The differences among the terms within each group is not important at the moment.)


